#!/usr/bin/php
<?php

/**
 * lingth
 *
 * Identify lines longer than a given character length.
 *
 * This script provides a command-line interface to the check_line_lengths
 * function, and supports various options, multiple files, input redirection,
 * configuration, and usage info.
 */

// Stop if we're trying to run via a non-cli interface such as a web server.
if (php_sapi_name() != "cli") {
    exit("cli only");
}

// Store the name of the binary for use in errors, etc.
define("NAME", basename(array_shift($argv)));

// Exit status error values
define("ERR_BAD_USAGE", 1);
define("ERR_BAD_CONFIG", 2);
define("ERR_BAD_FILE", 3);

// Extract options from config file and command line arguments.
$opts = read_config();
$opts = proc_options($argv, $opts);

// If not specified, this option depends on the number of files
if (!array_key_exists("show_filenames", $opts)
    || $opts["show_filenames"] == null
) {
    $opts["show_filenames"] = count($argv) > 1;
}

if (count($argv)) {
    // Handle filenames passed as parameters.
    foreach ($argv as $filename) {
        if (($path = realpath($filename)) === false) {
            fwrite(STDERR, NAME.": $filename: No such file\n");
            exit(ERR_BAD_FILE);
        } elseif (is_dir($path)) {
            fwrite(STDERR, NAME.": $filename: Is a directory\n");
            exit(ERR_BAD_FILE);
        }

        $results = check_line_lengths($filename, file_get_contents($path), $opts);
        echo cli_report($filename, $results, $opts);
    }
} else if (!posix_isatty(STDIN)) {
// Handle any input piped or redirected here.
    $line_number = 1;
    //$str = stream_get_contents(STDIN);

    while (($line = fgets(STDIN)) !== false) {
        $result = check_line_length(trim($line), $line_number++, $opts);
        echo cli_report("(standard input)", array($result), $opts);
    }

    exit(0);
    $results = check_line_lengths("(standard input)", $str, $opts);
    echo cli_report("(standard input)", $results, $opts);
} else /*if (count($argv) == 0)*/ {
    fwrite(STDERR, usage());
    exit(ERR_BAD_USAGE);
}


/**
 * Read configuration from json file. Search locations according to the XDG
 * Base Directory Specification.
 * 
 * @return Array A map of configuration values.
 */
function read_config()
{
    $config_dirs = getenv('XDB_CONFIG_DIRS');

    if ($config_dirs === false) {
        $config_dirs = array('/etc/xdg');
    } else {
        $config_dirs = explode(':', $config_dirs);
    }

    $config_home = getenv('XDG_CONFIG_HOME');

    if ($config_home === false) {
        $config_home = getenv('HOME').'/.config';
    }

    $config_dirs[] = $config_home;

    foreach ($config_dirs as $dir) {
        if (file_exists($file = $dir."/".NAME."/config.json")) {
            return json_decode(file_get_contents($file), true);
        }
    }

    fwrite(STDERR, "bad error: no config file. install one.\n");
    exit(ERR_BAD_CONFIG);
}

/**
 * Process options from arguments passed to the script.
 * 
 * @param Array $args Set of strings representing command line arguments.
 * @param Array $opts Map of options to overwrite/augment.
 * 
 * @return Array New map of options.
 */
function proc_options(&$args, $opts)
{
    while (count($args) && $args[0][0] == '-') {
        if (($arg = array_shift($args)) == '--') {
            break;
        }

        if ($arg == "--help") {
            fwrite(STDOUT, usage(true));
            exit(0);
        }

        for ($ch = 1; $ch < strlen($arg); $ch++) {
            switch ($arg[$ch]) {
                case 'c': $opts['show_content'] = false; break;
                case 'H': $opts['show_filenames'] = true; break;
                case 'h': $opts['show_filenames'] = false; break;
                case 'l': $opts['show_length'] = false; break;
                case 'm': $opts['max_length'] = handle_arg($arg, $args); break;
                case 'n': $opts['show_line_numbers'] = false; break;
                case 'p': $opts['replace_tabs'] = false; break;
                case 't': $opts['tab_width'] = handle_arg($arg, $args); break;
                default:
                    if (!is_numeric($arg[$ch])) {
                        fwrite(
                            STDERR,
                            NAME.": illegal option -- ".$arg[$ch]."\n"
                        );
                        
                        fwrite(STDERR, usage());
                        exit(ERR_BAD_USAGE);
                    }
            }
        }
    }

    return $opts;
}

/**
 * Process a command-line option that requires an argument
 *
 * @param String $arg  Argument to process.
 * @param Array  $args Full list of unprocessed arguments.
 * 
 * @return int Argument value
 */
function handle_arg($arg, &$args)
{
    if (strlen($arg) > 2) {
        $argval = substr($arg, 2);
    } elseif (count($args)) {
        $argval = array_shift($args);
    } else {
        fwrite(STDERR, NAME.": Option requires an argument -- ".$arg[1]."\n");
        fwrite(STDERR, usage());
        exit(ERR_BAD_USAGE);
    }

    if (!is_numeric($argval)) {
        fwrite(
            STDERR,
            NAME.": Invalid argument; must be numeric -- ".$argval."\n"
        );

        fwrite(STDERR, usage());
        exit(ERR_BAD_USAGE);
    }

    return (int)$argval;
}

/**
 * Check line lengths.
 * 
 * This is the main functionality of lingth, reporting on lines that are
 * longer than the specified maximum, and including details such as line
 * numbers.
 *
 * @param String $filename Name representing the file being checked
 * @param String $contents Contents of the file
 * @param Array  $options  Options/flags to control behaviour
 *
 * @return string Report containing info for each instance of a long line
 */
function check_line_lengths($filename, $contents, $options)
{
    $lines = explode("\n", $contents);
    $options["encoding"] = mb_detect_encoding($contents);
    $out = array();

    foreach ($lines as $line_number => $line) {
        if ($result = check_line_length($line, $line_number + 1, $options)) {
            $out[] = $result;
        }
    }

    return $out;
}

/**
 * @param String $line
 * @param int    $line_number
 */
function check_line_length($line, $line_number, $options)
{
    if ($options["replace_tabs"]) {
        $line_tr = retab_front($line, $options["tab_width"]);
    } else {
        $line_tr = $line;
    }

    $result = false;

    $encoding = array_key_exists("encoding", $options)
        ? $options["encoding"]
        : mb_detect_encoding($line);

    if (($len = mb_strlen($line_tr, $encoding)) > $options["max_length"]) {
        $result = array("line" => $line);

        if ($options["show_line_numbers"]) {
            $result["line_number"] = $line_number;
        }

        if ($options["show_length"]) {
            $result["length"] = $len;
        }
    }

    return $result;
}

/**
 * Format line-length results for terminal output.
 *
 * @param String $filename Name of file that produced these results
 * @param Array  $results  Results obtained from check_line_lengths()
 * @param Array  $options  Options/flags to control behaviour (see above)
 *
 * @return string Results formatted for terminal output
 */
function cli_report($filename, $results, $options)
{
    $out = "";

    foreach ($results as $result) {
        $line = $result["line"];
    
        /*if ($options["replace_tabs"]) {
            $line = retab_front($line, $options["tab_width"]);
        }*/

        $out .= ($options['show_filenames'] ? $filename.':' : '')
            .($options['show_line_numbers'] ? $result['line_number'].' ' : '')
            .($options['show_content'] ? $line : '')
            .($options['show_length'] ? " ".$result["length"] : '')
            ."\n";
    }

    return $out;
}

/**
 * Replace leading tabs with equivalent spaces.
 *
 * @param string $str       String to replace tabs in
 * @param int    $tab_width Number of spaces to replace each tab with
 *
 * @return String after any and all replacements have been made
 */
function retab_front($str, $tab_width)
{
    return preg_replace_callback(
        '/^\t+/',
        function($matches) use($tab_width) {
            return str_repeat(' ', $tab_width * strlen($matches[0]));
        },
        $str
    );
}

/**
 * Get usage string.
 * 
 * @todo Should the description for display booleans be "Don't show" or "Hide"?
 * 
 * @return string usage
 */
function usage($long = false)
{
    $out = sprintf("usage: %s [-chHlnp] [-m num] [-t num] [file ...]\n", NAME)
          .sprintf("       %s [--help]\n", NAME);

    if ($long) {
        $out .= ""
            ."  -c      don't show content\n"
            ."  -h      don't show filenames\n"
            ."  -H      show filenames\n"
            ."  -l      don't show length\n"
            ."  -L      show length\n"
            ."  -m num  set length limit\n"
            ."  -n      don't show line numbers\n"
            ."  -N      show line numbers\n"
            ."  -p      don't replace tabs with spaces\n"
            ."  -P      replace tabs with spaces\n"
            ."  -t num  set tab width in spaces\n\n"
            ."  --help  display this help and exit\n";
    } else {
        $out .= sprintf("Try `%s --help' for more information.\n", NAME);
    }

    return $out;
}
